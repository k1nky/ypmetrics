// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "github.com/k1nky/ypmetrics/internal/entities/metric"
	storage "github.com/k1nky/ypmetrics/internal/storage"
)

// MockstorageLogger is a mock of storageLogger interface.
type MockstorageLogger struct {
	ctrl     *gomock.Controller
	recorder *MockstorageLoggerMockRecorder
}

// MockstorageLoggerMockRecorder is the mock recorder for MockstorageLogger.
type MockstorageLoggerMockRecorder struct {
	mock *MockstorageLogger
}

// NewMockstorageLogger creates a new mock instance.
func NewMockstorageLogger(ctrl *gomock.Controller) *MockstorageLogger {
	mock := &MockstorageLogger{ctrl: ctrl}
	mock.recorder = &MockstorageLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorageLogger) EXPECT() *MockstorageLoggerMockRecorder {
	return m.recorder
}

// Errorf mocks base method.
func (m *MockstorageLogger) Errorf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockstorageLoggerMockRecorder) Errorf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockstorageLogger)(nil).Errorf), varargs...)
}

// MockstorageRetrier is a mock of storageRetrier interface.
type MockstorageRetrier struct {
	ctrl     *gomock.Controller
	recorder *MockstorageRetrierMockRecorder
}

// MockstorageRetrierMockRecorder is the mock recorder for MockstorageRetrier.
type MockstorageRetrierMockRecorder struct {
	mock *MockstorageRetrier
}

// NewMockstorageRetrier creates a new mock instance.
func NewMockstorageRetrier(ctrl *gomock.Controller) *MockstorageRetrier {
	mock := &MockstorageRetrier{ctrl: ctrl}
	mock.recorder = &MockstorageRetrierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorageRetrier) EXPECT() *MockstorageRetrierMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockstorageRetrier) Init(arg0 func(error) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0)
}

// Init indicates an expected call of Init.
func (mr *MockstorageRetrierMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockstorageRetrier)(nil).Init), arg0)
}

// Next mocks base method.
func (m *MockstorageRetrier) Next(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockstorageRetrierMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockstorageRetrier)(nil).Next), arg0)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// GetCounter mocks base method.
func (m *MockStorage) GetCounter(ctx context.Context, name string) *metric.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", ctx, name)
	ret0, _ := ret[0].(*metric.Counter)
	return ret0
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockStorageMockRecorder) GetCounter(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockStorage)(nil).GetCounter), ctx, name)
}

// GetGauge mocks base method.
func (m *MockStorage) GetGauge(ctx context.Context, name string) *metric.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", ctx, name)
	ret0, _ := ret[0].(*metric.Gauge)
	return ret0
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockStorageMockRecorder) GetGauge(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockStorage)(nil).GetGauge), ctx, name)
}

// Open mocks base method.
func (m *MockStorage) Open(cfg storage.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockStorageMockRecorder) Open(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStorage)(nil).Open), cfg)
}

// Snapshot mocks base method.
func (m *MockStorage) Snapshot(ctx context.Context, metrics *metric.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockStorageMockRecorder) Snapshot(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStorage)(nil).Snapshot), ctx, metrics)
}

// UpdateCounter mocks base method.
func (m *MockStorage) UpdateCounter(ctx context.Context, name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockStorageMockRecorder) UpdateCounter(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockStorage)(nil).UpdateCounter), ctx, name, value)
}

// UpdateGauge mocks base method.
func (m *MockStorage) UpdateGauge(ctx context.Context, name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockStorageMockRecorder) UpdateGauge(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockStorage)(nil).UpdateGauge), ctx, name, value)
}

// UpdateMetrics mocks base method.
func (m *MockStorage) UpdateMetrics(ctx context.Context, metrics metric.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockStorageMockRecorder) UpdateMetrics(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockStorage)(nil).UpdateMetrics), ctx, metrics)
}
